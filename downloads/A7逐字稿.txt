好 所以接下來我要用
用這個第一組的
對應的這個來做示範 OK
因為他們已經把
分組的這個倉儲內容已經建好了
可是我現在想要用
Code Spaces來維護它
好 所以你要仔細看喔
現在每一個倉儲啊
它其實都有Code
OK 那你假如是看老師的畫面你
各組你趕快弄成這樣之後
就可以改版了
然後你就可以直接點這個Code
它就會跑 其實它就跑這個啦
然後你再點這個
你就會發現這個Code 任何一個倉儲裡面
其實都已經有配置這個Code Spaces
這個就是一個線上的一個整合環境
其實跟Replit是一樣
只是它的介面啊
是用Visual Studio Code
所以你點它的話它這邊就會出現
你可以在這個倉儲底下
你可以建一個
透過組分支來建一個Code Space
好 所以我們就點它
目前我是用第一組組長的帳號做的
OK 所以它就進入
這個就是Visual Studio Code的畫面
那首先當然我要先啟動
想辦法先啟動它的動態編輯網站對不對
好 那我們先看一下它這邊的配置
這個是它的主要的功能表
我們比較常用的是這個終端機
因為我們啟動動態之後啊
我必須要再新增一個中端機
這個就是我們Replit的Share
Terminal的意思
Terminal就是輸入指令用
那因為我們一方面要啟動動態
二方面要啟動靜態
好 所以我就必須要在這個
拉出終端機 我新增一個
所以表示現在我有兩個命令區
因為它是Bone Share
Bone好像URAN吧 SH也是Share
所以它其實是可以輸入指令的地方
那你假如還記得我們在Replit裡面
我們啟動的時候
它這個Run其實是執行什麼
我們可以在對應的設定檔
所以我們在之前
假如你知道的話我把Hidden File打開來
我們按Run其實它就是啟動
Python 3去執行它的Main
它就是Run Run就是這個
就是利用Python 3
第三版的Python去執行Main.py
好 那我們試試看
同樣的在Core Spaces
我們就這樣做看看
這個虛擬環境很顯然
還沒有我們要的Python環境
我們只是執行看看就知道了
所以我們這裡就打Python 3
Main.py
它就馬上告訴你說不行喔
因為連Flash可都沒有
模組沒有啊
那模組沒有還記得我們
在Replit是怎麼做的嗎
我們是Chmod U+X init_replit
然後是針對什麼
./init_replit
讓這個程式可以執行
緊接著就請它幫我安裝對應的模組
對吧
那你就會發現說
它速度好像比Replit快
因為它給的資源相對是多的
那應該是快蠻多的
因為它給你免費
目前的核心
你假如進來
它對應的這個
你這裡想要看到底
它現在配置給我們什麼
你就可以Code Spaces
你就可以看到
其實你剛剛已經啟動了一個Code Spaces
OK
然後它的給定的是兩個Code
8GB
剛剛你假如注意的話
Reply給你2GB而已對不對
它現在給你8GB兩個Code
然後一個月它免費的是
一天假如2Code
你用它Hour
小時的話
它一個月免費是120個Code Hour
所以假如我們今天用了一個小時
就用掉兩個Code Hour
這樣你基本上就剩下118個Code Hour
用完就沒了
所以很顯然我們要善用
這裡面的Code Hour
編輯的時候可以不要在上面
就不要在上面
只有轉檔特定啟動的時候在上面
所以這個時候你就知道要怎麼省
所以我這樣子安裝之後
我其實已經可以了
所以我用往上的箭頭把剛剛的這個拿出來
所以這個時候在執行
你就會發現說
它就幫我啟動一個埠號
OK
所以它這裡就跳出來說
它已經啟動一個埠號了
那這個是動態的
所以我就把動態打開來
接下來就跟Local Host
以及我在對應的Reply是一樣的
所以是小寫了admin進來
那為什麼不需要像Replit上學期的這個
Secret
不用Secret
因為誰知道我的網址是什麼
它每一次中間這個都不一樣
所以就有保全的功能
所以我進來這邊
我只要會更新
會轉檔就OK了
對吧
所以轉檔
Commit Push就上去
問題是
那我的靜態要怎麼看
好 那靜態
因為我有兩個嘛 對不對
這個已經執行Python了
我還有一個
所以這裡是新的喔
我們就要Python3
我要執行它的模組
而且是啟動Http.server
所以這個的意思就是
因為我們這個系統
這個系統帶有動態跟靜態
那靜態我們還有一個index
我們的根目有index可以啟動
那你假如要看
它裡面就有這個index
我們把它帶到編輯器
index怎麼講的
index就是說你幫我毫不猶豫的
這個是沒有任何delay的
0秒 它會跳到哪裡
它會跳進content index
content是靜態 對不對
所以很顯然我只要利用這個指令
啟動靜態 我就可以看到了
所以意思是
就跟我在近端一樣
它又開了一個埠號
所以我這裡再打開
我就可以同時有動態跟靜態
那好處是什麼
好處是我改版之後轉檔
馬上可以看到
OK 那比方說
我想要在About跟CMS IMD這裡
我要加一個oneshape
我到時候指定給
某一個組員畫零件的部分
我要請它把它相關的連結放到這裡來
而且是第一階的
我就把它save起來
只要我按一下轉靜態
我馬上在這裡可以看到
原來這裡沒有對不對
我現在有了
而且這個是還沒有推到getup pages
所以很方便
同樣的假如你會寫網誌
好 那我們現在的網字在這裡
其實你有部分的設定程式
或者是我們要求你每個禮拜都寫的話
那你有一些運算
設計的運算也好
或者是你在裡面想要
呈現什麼樣的動態內容
你就可以直接寫在網誌
而且一轉檔馬上就會出現在這邊
為什麼
因為現在動態靜態兩個同時在
而且它的前面的這個部分是一樣
差別在撲號
有沒有 這個是8080
但是它撲號並不是放在後面
它全部都用443幫你轉
所以不錯
對我們來講非常方便
所以我們在這樣的一個情況下
你假如覺得兩個不夠
它又沒有限制我幾個中單機
它只限制我們使用的call hour
所以我們假如要編網誌
我們一般是不會在這裡
不會在這裡動
意思是說好 那我假如要推上去
推上去我要用手動
所以我要git add
git commit
這裡因為沒有git的那個tool 沒有
全部都是指令
所以我說我add oneshape
我要開始畫
其中的那個平台
然後我趕快git push 就上去了
上去之後它就會出現在這裡
它就會出現在這裡
轉檔
所以這個很方便
因為假如你要退出來它有兩個地方退
一個是從這裡
因為現在目前是active
那這裡我是怎麼過來的
你只要有啟動登入到github
你只要打github.com/code spaces
它就進來了
那目前我是啟動一個code space
所以你在這裡你可以關
你在這裡你可以stop
它就不再計算你的code hour
你也可以直接在剛才的這裡面
在這裡要怎麼關
不是在那裡關 在這裡關
從這裡也可以關
這個跟剛剛那個是一樣
只是這個是在倉儲下面
剛才那個是在code space的畫面下
所以我現在把它關掉
我就跑到我的倉儲
跑到這裡我就跟它講
我要關 我要stop
這樣它就不會記錄code hour
因為我一個月只有120個
那這個月最後一天
所以你就盡量用吧
我不曉得它怎麼算的
我們29號了
所以你現在120個
那你可以開通宵
3月份重新計算
所以這裡等於有一點吃到飽的概念
最後一天 我不知道它是不是這樣算的
這個部分你但轉檔完
其實我們的這一個所謂的
我們從這裡面要怎麼看它的靜態
你假如懶得去拼的話
你就跑到pages這裡來
然後你就點這個
其實它的規律我們也知道
所以oneshape應該有在上面 在這裡
所以這個影片我們就把它丟到線上
然後你剩下的時間
你就趕快一方面我加入
二方面我就開始
每一個人直接進入到倉儲
