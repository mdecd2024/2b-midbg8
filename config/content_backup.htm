<h1>About</h1>
<p>41023132: <a href="https://github.com/BX41023132/cd2024">https://github.com/BX41023132/cd2024</a></p>
<p>41039138: <a href="https://github.com/GUJIAFENG/cd2024">https://github.com/GUJIAFENG/cd2024</a></p>
<p></p>
<p></p>
<p>分組名單:</p>
<p>41023132林秉賢</p>
<p>41039138凃家豐</p>
<p></p>
<p>網頁:  <a href="https://mdecd2024.github.io/2b-midbg8/content/About.html">https://mdecd2024.github.io/2b-midbg8/content/About.html</a></p>
<p>網誌:  <a href="https://mdecd2024.github.io/2b-midbg8/blog">https://mdecd2024.github.io/2b-midbg8/blog</a></p>
<p>簡報: <a href="https://mdecd2024.github.io/2b-midbg8/reveal">https://mdecd2024.github.io/2b-midbg8/reveal</a></p>
<p>倉儲: <a href="https://github.com/mdecd2024/2b-midbg8">https://github.com/mdecd2024/2b-midbg8</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<p style="padding-left: 30px;"></p>
<h1>W4</h1>
<h2>心得</h2>
<p>41023132:這次的翻譯作業東西非常的多，也因為我們這一組只有兩個人，所以工作量也比其他組大。</p>
<p>我覺得翻譯這種事情很容易因為自己的理解，而有不同的意思，透過自己親身去翻譯才能悟出其中的道理。</p>
<p>雖然翻譯需要很大量的時間和精神，但看到最終的結果也有滿滿的成就感。</p>
<p>41039138:這次的作業要翻譯一篇英文文章，我們工作量分配是一人翻譯一半我負責下半部分，我們這組單一一人的工作量比其他組還要來的多我是負責下半部分的，雖然我們工作量多，但只要多去用不要讓自己閒下來，我覺進度不會比其他組慢。</p>
<h2>HW</h2>
<p>41023132 林秉賢:P1-44</p>
<p><a href="/downloads/41023132-P1-44.pdf">/downloads/41023132-P1-44.pdf</a></p>
<p>41039138 凃家豐:P45-87</p>
<p><a href="/downloads/latex2.pdf">/downloads/latex2.pdf</a></p>
<p><a href="/downloads/41039138翻譯中英並列.pdf">/downloads/41039138翻譯中英並列.pdf</a></p>
<p>完整P1-87</p>
<p><a href="/downloads/2b-midbg8-report.pdf">/downloads/2b-midbg8-report.pdf</a></p>
<h1>W5</h1>
<h2>1-7影片統整(41023132)</h2>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/JyGRsX7UTo0?si=AtCXMBy9XC9AkgUg" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/1建個人課程倉儲.txt">/downloads/1建個人課程倉儲.txt</a></p>
<p>1.學習如何從頭建立個人倉儲，對自己的個人倉儲進行維護。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/71k1rioHrZw?si=uufzSPTaeVeOLays" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/2如何從 Replit Account 設定 Connect 連結到 Github.txt">/downloads/2如何從 Replit Account 設定 Connect 連結到 Github.txt</a></p>
<p>2.利用repilt推送資料到倉儲，學習如何將replit和github連動。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/r9f2g3U6Km8?si=cRVPHAG6GHR3QrPz" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/3如何設定 Github 帳號的雙重認證.txt">/downloads/3如何設定 Github 帳號的雙重認證.txt</a></p>
<p>3.為保護個人倉儲的安全及個資的問題，學習設定帳號的雙重認證。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/M34uvvI2kMU?si=Krbco0d5xF0VKtpS" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3gEGAN8vTQA?si=Lbrh1O8CVxvgBhrl" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/4說明如何將倉儲 import 至 Replit 改版後推回 github.txt">/downloads/4說明如何將倉儲 import 至 Replit 改版後推回 github.txt</a></p>
<p>4.利用replit推送資料，並學習推送資料前的設定。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/O8u4nPoYufE?si=G7IKCGAq1x3ltF5O" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/yaPm0EokUX8?si=nY8l2NBnxWDnXaVC" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/5第一組組長建立 Team 並設定分組倉儲.txt">/downloads/5第一組組長建立 Team 並設定分組倉儲.txt</a></p>
<p>5.分組，最多8人一組，分完組別後，建立Team及分組倉儲。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ONu-ptr0aQI?si=IJVFrpfzsRVGEGAh" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/6從第一組空倉儲建立 cmsimde_site 內容.txt">/downloads/6從第一組空倉儲建立 cmsimde_site 內容.txt</a><a href="/downloads/7利用 codespaces 維護分組網站.txt">/</a></p>
<p>6.借用第六組的倉儲，設定網頁。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/aBmgPXlqnRw?si=9nCVKBHQwxd6KOvy" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/7利用 codespaces 維護分組網站.txt">downloads/7利用 codespaces 維護分組網站.txt</a></p>
<p>7.之前有學利用replit維護個人網站，這次學習利用codespaces維護分組網站。</p>
<p></p>
<p><a href="/downloads/2.txt"></a></p>
<h2>8-14影片統整(41039138)</h2>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Swo_hsRiOWU?si=PZy2cwVba2cshg7s" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/A8逐字稿.txt">8逐字稿.txt</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/LOurxjHO_RM?si=tRL1KoU7XmIBUYKq" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5f9kQOT06mM?si=z0-uNpjUoNRqdapU" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/A9逐字稿.txt">9逐字稿.txt</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/GdOlmbG8N44?si=zk212pXEiQrQuhm4" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/A10逐字稿.txt">10逐字稿.txt</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/DqOe5IiPr58?si=zQhzeqRHn52GDmBz" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/A11逐字稿.txt">11逐字稿.txt</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/t4xKf8oGhgE?si=sgU_yBx3sDJvkA4O" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/A12逐字稿.txt">12逐字稿.txt</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/i5yMnBsOAds?si=rZv2k_ugA9pnXPFc" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/A13逐字稿.txt">13逐字稿.txt</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/t4bVjvu6oF8?si=RkxbWQkcxn-vhpkh" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/A14逐字稿.txt">14逐字稿.txt</a></p>
<p></p>
<h1>W10</h1>
<div>
<div><span>文章摘要</span></div>
<div><span>cd2024_2D Ball Balancer Control using QUARC</span></div>
<br/>
<div><span>此文章是關於「2D 球平衡器實驗」的指導手冊。實驗的目標是穩定球在平衡板上的位置，並使用比例-積分-微分（PID）控制系統來滿足一組規格要求。實驗涵蓋了以下主題：</span></div>
<div><span>-</span><span> 從第一原理建立球的動態模型。</span></div>
<div><span>-</span><span> 獲取系統的傳遞函數表示。</span></div>
<div><span>-</span><span> 設計比例-速度（PV）補償器，以控制伺服負載軸的位置，符合某些時域要求。</span></div>
<div><span>-</span><span> 設計比例-積分-微分（PID）補償器，調節樑上球的位置，滿足特定規格。這與伺服控制一起構成完整的球和樑串級控制系統。</span></div>
<div><span>-</span><span> 探索控制技術，如設定點權重和積分反飽和。</span></div>
<div><span>-</span><span> 使用植物模型模擬球和樑控制，確保滿足規格，並避免任何致動器飽和。</span></div>
<div><span>-</span><span> 在 Quanser 2DBB 裝置上實施控制器並評估其性能。</span></div>
<br/>
<div><span>在先修條件方面，使用者應熟悉以下內容：</span></div>
<div><span>-</span><span> 數據收集卡（例如 Q2-USB）、功率放大器（例如 VoltPAQ）和 SRV02 的主要組件（例如致動器、感應器）。</span></div>
<div><span>-</span><span> SRV02 植物與放大器和 DAQ 設備的連線和操作程序。</span></div>
<div><span>-</span><span> 在 Reference [</span><span>6</span><span>] 中描述的實驗室，以便熟悉在 SRV02 上使用 QUARC。</span></div>
<div><span>-</span><span> 根據 Reference [</span><span>8</span><span>] 的要求為 SRV02 設計 PV 位置控制。</span></div>
<br/>
<div><span>該文件還包含了有關模型方程式、控制響應設計、實驗室程序和結果摘要等詳細內容。</span></div>
<br/><br/>
<div><span>Ball_on_the_plate_balancing_control_system </span></div>
<br/>
<div><span>  文章中介紹了一個建構雙自由度球在盤系統實驗平台的設計,用於控制系統的學習和測試不穩定動態物體的平衡技術。該平台配備了電阻式觸控螢幕來獲取球的位置資料,步進電機和位置傳感器來調整平台傾斜角度,以及基於AVR微控制器的雙迴路從屬控制系統,內含PID控制器用於維持球的平衡位置。</span></div>
<div><span>  </span></div>
<div><span>   該實驗平台的機械設計由木質基座、印刷成型的3D支撐塔、電阻式觸控螢幕、步進電機和位置反饋電位器組成。控制系統採用100Hz頻率操作,讀取球和平台傾斜角的資訊,並使用外環控制球位置、內環控制平台角度的從屬PID控制器設計。</span></div>
<div><span>   </span></div>
<div><span>   實驗結果顯示,控制系統能夠將鋼球帶回並維持在觸控螢幕的中心點,即使受到外部干擾。該實驗平台可用於測試控制算法,對於船舶、航空器等穩定性控制應用有一定參考價值。未來的工作包括改進反饋信號濾波以提高控制質量,以及探索更複雜的delta機器人控制問題。</span></div>
<br/><br/>
<div><span>Design and Implementation a Ball Balancing System for Control Theory Course </span></div>
<br/>
<div><span>  這篇論說明在開發一個球在桿平衡系統,作為控制理論課程的教學工具。該系統使用微控制器和相關的控制算法,透過實時感測反饋來調整桿的角度,使球保持在預設位置平衡。</span></div>
<br/>
<div><span>  作者設計了三代原型,並逐步優化了系統的穩定性、輕量化和便攜性。最終採用了木頭材質,包括一根安裝有伺服電機的桿、超聲波感測器、Arduino微控制器板和電路連接板。</span></div>
<br/>
<div><span>  該系統採用PID控制算法,根據球的實際位置與預設點的偏差,調節桿的傾角以最小化誤差。還引入了自適應PID控制,根據誤差大小動態調整PID參數,提高控制效率。</span></div>
<br/>
<div><span>  另外,作者開發了MATLAB介面程式,能夠實時獲取並繪製球的位置曲線,幫助學生理解反饗環控制原理。</span></div>
<br/>
<div><span>  這個簡單的球平衡系統,集成了感測器、執行器、微控制器編程和控制算法等內容,非常適合用於控制理論課程的實踐教學,可以讓學生將理論知識與實際操作相結合,幫助培養實踐能力。該方法也可推廣應用於更複雜的控制系統。</span></div>
<br/><br/>
<div><span>Simulation_and_Experimental_Study_of_Ball_Position </span></div>
<br/>
<div><span>  本篇論文針對雙軸平台上的球平衡控制系統,詳細設計並比較了三種控制結構:PD控制器、全狀態迴饋和具有狀態觀測器的全狀態迴饋。所有控制結構均採用相同的參數設計方法,針對預設的建立時間進行極點置換。</span></div>
<br/>
<div><span>  首先導出了球在平台上的數學模型和傳遞函數,揭示了開環系統的本質不穩定性。接著設計了永磁直流電機的位置環用於控制平台傾角,並透過標準設計方法確保所需的動態回應。</span></div>
<br/>
<div><span>  實驗平台由電阻式觸控屏、永磁直流電機、Kinetis K60數位控制器等組成。三種控制結構的仿真和實驗結果顯示,具有狀態觀測器的結構效果最佳,能夠有效抑制噪聲並實現穩定控制和軌跡追蹤。</span></div>
<br/>
<div><span>  此外,文中還提供了相關的數學推導過程,以及詳細的控制系統設計方法。該球平衡平台不僅可用於驗證各種控制理論,還有助於讓學生更直觀地理解控制原理,結合理論知識與實踐操作,成為極具教學價值的系統。</span></div>
<br/><br/>
<div><span>A real time control system for balancing a ball on a platform with FPGA parallel implementation</span></div>
<br/>
<div><span>  本篇論文提出一種新的基於PID控制器的解決方案,可以在實時系統中精準控制球體在平台上的位置。首先,建立了球體在平台上的運動數學模型並推導出其傳遞函數。接著,設計了PID控制器用於平衡球體在平台上的位置。該PID控制器的實作採用了FPGA上的並行計算架構,可顯著提高計算效率。最後,通過Matlab仿真驗證了該控制系統調節球體在平台上位置的精度。該PID控制器設計可以應用於需要對多個參數進行高速實時控制的物件系統中。</span></div>
<br/>
<div><span>Construction and theoretical study</span></div>
<div><span>    </span></div>
<div><span>   這篇論文的摘要涵蓋了控制理論及其應用對動態系統的重要性，特別是在補償對於本身不穩定或半穩定系統施加的干擾和外部行為方面。通過建構一個實物裝置來展示理論，並進一步比較從牛頓力學中得出的實際物理和電腦模擬結果。為了進行比較，設計一個滿足系統要求的滿意控制器是必要的。在裝置和控制方面，引入了一個比例-積分-微分（PID）控制器，用於平衡平台上的球。進一步進行分析以確定在穩定自然不穩定或半穩定系統時的限制，並檢查這些限制與理論期望之間的差異。</span></div>
<br/>
<div><span>   整篇論文中應用的控制是線性類型，僅能在線性控制範圍內正常運作。使用標準元件和微控制器，構建了一個裝置來維持平台上的球。通過使用Arduino庫和開源代碼進行編程。因此，出於研究目的，看看該裝置是否能夠在線性控制領域內正常運作。</span></div>
<br/>
<div><span>   總之，這篇論文將首先通過計算機輔助程序來涵蓋球在平台上的理論模型。然後將理論結果與從實物構造中獲得的結果進行比較。進一步檢查控制理論和系統實施方面的差異原因。</span></div>
</div>
<p></p>
<h2>鋼球平衡台零件繪製</h2>
<p>繪製分工</p>
<p>41023132:</p>
<p><a href="/downloads/y_link.prt">/downloads/y_link.prt</a></p>
<p><a href="/downloads/s_link.prt">/downloads/s_link.prt</a></p>
<p><a href="/downloads/base.prt">/downloads/base.prt</a></p>
<p><a href="/downloads/shaft.prt">/downloads/shaft.prt</a></p>
<p></p>
<p>41039138:</p>
<p><a href="/downloads/platform.prt">/downloads/platform.prt</a></p>
<h1>W12實習與分工</h1>
<p>任務一 NXOpen 實習項目 (41023132)</p>
<p><a href="/downloads/1.py">/downloads/1.py</a></p>
<p><a href="/downloads/journal.py">/downloads/journal.py</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Yq1q4eg9n14?si=PYouaqGH0yakOlY4" title="YouTube video player" width="560"></iframe></p>
<p>任務二 分組倉儲設為評分倉儲的子模組(41039138)</p>
<p><span>2b 評分倉儲:</span><span> </span><a href="https://github.com/mdecd2024/2bstud-2bsite">https://github.com/mdecd2024/2bstud-2bsite</a></p>
<p>任務三 cd2023 足球機器人網際場景模擬(41039138)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/jN2-4E6mAZA?si=9FGKWHXzZ3d91Jp7" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/u7Wzc-2tV84?si=Ghx3BGk5r8xcVBbX" title="YouTube video player" width="560"></iframe></p>
<h1>期中自評影片</h1>
<p>41023132林秉賢</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/7bs9EacGPtQ?si=WgavFuXxhly0svLX" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>41039138凃家豐</p>
<p><a href="/downloads/自評2.txt">自評.txt</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xh1lX_9fF_M?si=WY_xH-lwKJD6SGfC" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h1>cmsimde</h1>
<p></p>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>